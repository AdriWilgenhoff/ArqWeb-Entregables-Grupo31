public class MySQLProductoDAO implements ProductoDAO {

    private final Connection cn;

    public MySQLProductoDAO(Connection cn) {
        this.cn = cn;
        createTableIfNotExists();
    }

    private void createTableIfNotExists() {
        final String sql = "CREATE TABLE IF NOT EXISTS productos (" +
                           "id INT PRIMARY KEY AUTO_INCREMENT, " +
                           "nombre VARCHAR(255) NOT NULL, " +
                           "precio DECIMAL(10,2) NOT NULL" +
                           ")";

        try (Statement st = cn.createStatement()) {
            st.executeUpdate(sql);
        } catch (SQLException e) {
            throw new RuntimeException("Error creando tabla 'productos'", e);
        }
    }

    @Override
    public Producto findById(Long id) {
        final String sql = "SELECT id, nombre, precio FROM productos WHERE id = ?";
        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setLong(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                return rs.next() ? mapRow(rs) : null;
            }
        } catch (SQLException e) {
            throw new RuntimeException("Error en findById", e);
        }
    }

    @Override
    public void create(Producto p) {
        final String sql = "INSERT INTO productos (nombre, precio) VALUES (?, ?)";
        try (PreparedStatement ps = cn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            ps.setString(1, p.getNombre());
            ps.setBigDecimal(2, p.getPrecio());
            ps.executeUpdate();

            try (ResultSet keys = ps.getGeneratedKeys()) {
                if (keys.next()) p.setId(keys.getLong(1));
            }
        } catch (SQLException e) {
            throw new RuntimeException("Error en create", e);
        }
    }

    @Override
    public void update(Producto p) {
        final String sql = "UPDATE productos SET nombre = ?, precio = ? WHERE id = ?";
        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setString(1, p.getNombre());
            ps.setBigDecimal(2, p.getPrecio());
            ps.setLong(3, p.getId());
            ps.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException("Error en update", e);
        }
    }

    @Override
    public void delete(long id) {
        final String sql = "DELETE FROM productos WHERE id = ?";
        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setLong(1, id);
            ps.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException("Error en delete", e);
        }
    }

    @Override
    public void deleteAll() {
        try (Statement st = cn.createStatement()) {
            st.executeUpdate("DELETE FROM productos");
            st.executeUpdate("ALTER TABLE productos AUTO_INCREMENT = 1");
        } catch (SQLException e) {
            throw new RuntimeException("Error borrando todos los productos", e);
        }
    }

    @Override
    public Optional<TopProduct> findTopProductMostSold() {
    String sql =
            "SELECT p.nombre AS producto, " +
            "       SUM(d.cantidad) AS unidades_vendidas, " +
            "       SUM(d.cantidad * d.precio_unitario) AS ingreso_total " +
            "FROM productos p " +
            "JOIN detalles_pedidos d " +
            "ON p.id = d.producto_id " +
            "GROUP BY p.id " +
            "ORDER BY unidades_vendidas DESC " +
            "LIMIT 1";

    try (Statement st = ct.createStatement();
         ResultSet rs = st.executeQuery(sql)) {
        if (rs.next()) {
            return Optional.of(new TopProduct(
                    rs.getString("producto"),
                    rs.getInt("unidades_vendidas"),
                    rs.getBigDecimal("ingreso_total")
            ));
        }
    } catch (SQLException e) {
        throw new RuntimeException("Error consultando top product", e);
    }
    return Optional.empty();
}
}
