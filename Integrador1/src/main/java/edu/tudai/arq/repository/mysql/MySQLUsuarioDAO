public class MySQLUsuarioDAO implements UsuarioDAO {

    private final Connection cn;

    public MySQLUsuarioDAO(Connection cn) {
        this.cn = cn;
        createTableIfNotExists();
    }

    private void createTableIfNotExists() {
        final String sql = "CREATE TABLE IF NOT EXISTS usuarios (" +
                           "id INT PRIMARY KEY AUTO_INCREMENT, " +
                           "nombre VARCHAR(255) NOT NULL, " +
                           "apellido VARCHAR(255) NOT NULL, " +
                           "edad INT NOT NULL" +
                           ")";

        try (Statement st = cn.createStatement()) {
            st.executeUpdate(sql);
        } catch (SQLException e) {
            throw new RuntimeException("Error creando tabla 'usuarios'", e);
        }
    }

@Override
public Usuario findById(Long id) {
    final String sql = "SELECT id, nombre, apellido, edad FROM usuarios WHERE id = ?";

    try (PreparedStatement ps = cn.prepareStatement(sql)) {
        ps.setLong(1, id);

        try (ResultSet rs = ps.executeQuery()) {
            return rs.next() ? mapRow(rs) : null;
        }

    } catch (SQLException e) {
        throw new RuntimeException("Error en findById", e);
    }
}

@Override
public void create(Usuario u) {
    final String sql = "INSERT INTO usuarios (nombre, apellido, edad) VALUES (?, ?, ?)";

    try (PreparedStatement ps = cn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
        ps.setString(1, u.getNombre());
        ps.setString(2, u.getApellido());
        ps.setInt(3, u.getEdad());

        ps.executeUpdate();

        // Recupera el ID autogenerado y lo asigna al objeto Usuario
        try (ResultSet keys = ps.getGeneratedKeys()) {
            if (keys.next()) {
                u.setId(keys.getLong(1));
            }
        }

    } catch (SQLException e) {
        throw new RuntimeException("Error en create", e);
    }
}

@Override
public void update(Usuario u) {
    final String sql =
        "UPDATE usuarios SET nombre = ?, email = ?, genero = ? WHERE id = ?";

    try (PreparedStatement ps = cn.prepareStatement(sql)) {
        ps.setString(1, u.getNombre());
        ps.setString(2, u.getEmail());

        if (u.getGenero() == null) {
            ps.setNull(3, Types.VARCHAR);
        } else {
            ps.setString(3, u.getGenero());
        }

        ps.setLong(4, u.getId());
        ps.executeUpdate();

    } catch (SQLException e) {
        throw new RuntimeException("Error en update", e);
    }
}

@Override
public void delete(long id) {
    final String sql = "DELETE FROM usuarios WHERE id = ?";

    try (PreparedStatement ps = cn.prepareStatement(sql)) {
        ps.setLong(1, id);
        ps.executeUpdate();

    } catch (SQLException e) {
        throw new RuntimeException("Error en delete", e);
    }
}

@Override
public void deleteAll() {
    try (Statement st = cn.createStatement()) {
        st.executeUpdate("DELETE FROM usuarios");
        st.executeUpdate("ALTER TABLE usuarios AUTO_INCREMENT = 1");
    } catch (SQLException e) {
        throw new RuntimeException("Error borrando todos los usuarios", e);
    }
}

}