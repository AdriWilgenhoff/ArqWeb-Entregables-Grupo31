import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;

public class MySQLFacturaDAO implements FacturaDAO {

    private final Connection cn;

    public MySQLFacturaDAO(Connection cn) {
        this.cn = cn;
        createTableIfNotExists();
    }

    private void createTableIfNotExists() {
        final String sql = "CREATE TABLE IF NOT EXISTS facturas (" +
                "id INT PRIMARY KEY AUTO_INCREMENT, " +
                "fecha DATE NOT NULL, " +
                "total DECIMAL(10,2) NOT NULL" +
                ")";

        try (Statement st = cn.createStatement()) {
            st.executeUpdate(sql);
        } catch (SQLException e) {
            throw new RuntimeException("Error creando tabla 'facturas'", e);
        }
    }

    @Override
    public Factura findById(Long id) {
        final String sql = "SELECT id, fecha, total FROM facturas WHERE id = ?";

        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setLong(1, id);

            try (ResultSet rs = ps.executeQuery()) {
                return rs.next() ? mapRow(rs) : null;
            }
        } catch (SQLException e) {
            throw new RuntimeException("Error en findById", e);
        }
    }

    @Override
    public void create(Factura f) {
        final String sql = "INSERT INTO facturas (fecha, total) VALUES (?, ?)";

        try (PreparedStatement ps = cn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            ps.setDate(1, Date.valueOf(f.getFecha()));
            ps.setBigDecimal(2, f.getTotal());
            ps.executeUpdate();

            try (ResultSet keys = ps.getGeneratedKeys()) {
                if (keys.next()) {
                    f.setId(keys.getLong(1));
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException("Error en create", e);
        }
    }

    @Override
    public void update(Factura f) {
        final String sql = "UPDATE facturas SET fecha = ?, total = ? WHERE id = ?";

        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setDate(1, Date.valueOf(f.getFecha()));
            ps.setBigDecimal(2, f.getTotal());
            ps.setLong(3, f.getId());
            ps.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException("Error en update", e);
        }
    }

    @Override
    public void delete(long id) {
        final String sql = "DELETE FROM facturas WHERE id = ?";

        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setLong(1, id);
            ps.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException("Error en delete", e);
        }
    }

    @Override
    public void deleteAll() {
        try (Statement st = cn.createStatement()) {
            st.executeUpdate("DELETE FROM facturas");
            st.executeUpdate("ALTER TABLE facturas AUTO_INCREMENT = 1");
        } catch (SQLException e) {
            throw new RuntimeException("Error borrando todas las facturas", e);
        }
    }
}